---
- name: Deploy Palo Alto Firewall
  hosts: localhost
  gather_facts: no
  vars:
    firewall_vars:
      u_account_id: '{{ uaccountid }}'
      man_ip: '{{ manip }}'
      man_subnet: '{{ mansubnet }}'
      man_gw: '{{ mangw }}'
      man_cidr: '{{ mancidr }}'
      Time_Zone: '{{ time_zone }}'
      Site_Code: '{{ site_code }}'
      Location: '{{ location }}'
      Palo_Untrust_IP: '{{ inetip }}'
      Palo_Untrust_CIDR: '{{ inetcidr }}'
      Palo_Untrust_GW: '{{ inetgw }}'
      Palo_Untrust_VLAN: '{{ inetvlan }}'
      Palo_Untrust_INT: 'ethernet1/1'
      Palo_Trust_Subnet: '10.0.0.0/24'
      Palo_Trust_VLAN: '{{ intvlan }}'
      Palo_Trust_INT: 'ethernet1/2'
      Palo_DMZ_Subnet: '172.16.1.0/24'
      Palo_DMZ_VLAN: '{{ dmzvlan }}'
      Palo_DMZ_INT: 'ethernet1/3'
      Palo_DNS_Servers: ['8.8.8.8','4.4.8.8']
      Palo_SNMP_Contact: 'DC Network'
      Palo_SNMP_Community: 'invdcmon'
      int_ip: '{{ intip }}'
      dmz_ip: '{{ dmzip }}'
      vm_name: '{{ vmname }}'            
    management_vars:
      man_ip: '{{ manip }}'
      man_subnet: '{{ mansubnet }}'
      man_gw: '{{ mangw }}'
      man_cidr: '{{ mancidr }}'
      man_dns1: '{{ mandns1 }}'
      man_dns2: '{{ mandns2 }}'
      working_directory: '{{ working_directory }}'
    ansible_vars:
      vcd_org: '{{ vcdorg }}'
      vcd_vdc: '{{ vcdvdc }}'
      vcd_url: '{{ vcdurl }}'
      vm_name: '{{ vmname }}'
      man_ip: '{{ manip }}'
      working_directory: '{{ working_directory }}'
      catalog_org: '{{ catalogorg }}'
      catalog_name: '{{ catalogname }}'
      template_name: '{{ templatename }}'
      man_net_name: '{{ mannetname }}'
      inet_net_name: '{{ cust_name }}-{{ site_code }}-{{ inetvlan }}-INET'
      inet_ip: '{{ inetip }}'
      dmz_net_name: '{{ cust_name }}-{{ site_code }}-{{ dmzvlan }}-DMZ'
      dmz_ip: '{{ dmzip }}'
      int_net_name: '{{ cust_name }}-{{ site_code }}-{{ intvlan }}-TRUST'
      int_ip: '{{ intip }}'
      u_account_id: '{{ uaccountid }}'
    provider:
      ip_address: '{{ item.man_ip }}'
      username: '{{ palo_username }}'
      password: '{{ palo_password }}'
  pre_tasks:
    - name: Retrieve secrets from HashiCorp Vault
      set_fact:
        vcd_api: "{{ VCD_Api}}"
        vcd_auth: "{{ VCD_Auth}}"

  collections:
    - paloaltonetworks.panos
  tasks:
    - name: Create FWaaS Template
      vars:
        Palo_Admin_User: '{{ palo_username }}'
        Palo_Admin_Pass_Hash: '{{ palo_secret }}'
      template:
        src: "fwaas.j2"
        dest: "./iso/config/bootstrap.xml"
      with_items: 
        - "{{ firewall_vars }}"

    - name: Create TF vars
      template:
        src: "tf_variables.txt"
        dest: "autoVars.tfvars"
      with_items: 
        - "{{ ansible_vars }}"

    - name: Create fwaas init cfg
      template:
        src: "init.txt"
        dest: "{{ item.working_directory }}/Palo-Alto-Auto-Deploy/iso/config/init-cfg.txt"
      with_items: 
        - "{{ management_vars }}"

    - name: Execute create_iso
      command: "python3 create_iso.py template.iso {{ item.working_directory }}"
      register: script_output
      with_items: 
        - "{{ ansible_vars }}"

    #- debug: msg="{{script_output}}"   

    - name: Deploy Firewall with Terraform
      community.general.terraform:
        project_path: '{{ item.working_directory }}/Palo-Alto-Auto-Deploy'
        state: present
        force_init: true
        variables_files:
          - autoVars.tfvars
      with_items: 
        - "{{ ansible_vars }}"
  
    - name: Get VCD Auth Session
      uri:
        url: "https://{{ item.vcd_url }}/api/sessions"
        force_basic_auth: yes
        headers:
          Accept: "application/*+json;version=37.1"
          Authorization: "{{ vcd_auth }}"          
        method: POST
        validate_certs: no
        status_code: "200"
      with_items: 
        - "{{ ansible_vars }}"
      register: resp
    
    - name: Set vcloud token
      set_fact:
        vcloud_authorization: "{{ resp.results[0].x_vcloud_authorization }}"
    
    - name: Get VAPP
      uri:
        url: "https://{{ item.vcd_url }}/api/admin/extension/vapps/query?filter=name=={{ item.vm_name }}"
        headers:
          Accept: "application/*+json;version=37.1"
          x-vcloud-authorization: "{{ vcloud_authorization }}"
        method: GET
        validate_certs: no
        status_code: "200"
      with_items: 
        - "{{ ansible_vars }}"
      register: resp_vapp
    #- name: debug registered variable
    #  debug: msg="{{ resp_vapp }}"
    
    - name: Set vapp href
      set_fact:
        vapp_href: "{{ resp_vapp.results[0].json.record[0].href }}"      
    #- name: debug registered variable
    #  debug: msg="{{ vapp_href }}"
    
    - name: Power On VAPP
      uri:
        url: "{{ vapp_href }}/power/action/powerOn"
        headers:
          Accept: "application/*+json;version=37.1"
          x-vcloud-authorization: "{{ vcloud_authorization }}"
        method: POST
        validate_certs: no
        status_code: "202"
    
    - name: "wait for website to come up"
      uri:
          url: "https://{{ item.man_ip }}"
          status_code: 200
          validate_certs: "false"
      register: result
      until: result.status == 200
      retries: 90
      delay: 10
      with_items: 
        - "{{ firewall_vars }}"

    - name: Sleep for 4 minutes
      ansible.builtin.wait_for:
        timeout: 240
      delegate_to: localhost

    - name: create random but idempotent password
      ansible.builtin.set_fact:
        random_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=12, seed=vcloud_authorization) }}"
    
    - name: admin password     
      debug: msg="{{ random_password }}"

    - name: configure inv administrator
      panos_administrator:
        provider: '{{ provider }}'
        admin_username: 'invadmin'
        admin_password: '{{ random_password }}'
        superuser: true
      with_items: 
        - "{{ firewall_vars }}"

    - name: create random but idempotent password
      ansible.builtin.set_fact:
        random_lm_password: "{{ lookup('ansible.builtin.password', '/dev/null', length=14, seed=vcloud_authorization) }}"
    
    - name: Logic Monitor password     
      debug: msg="{{ random_lm_password }}"

    - name: configure LM user
      panos_administrator:
        provider: '{{ provider }}'           
        admin_username: 'monitor'
        admin_password: '{{ random_lm_password }}'
        superuser_read_only: true
      with_items: 
        - "{{ firewall_vars }}"        
        
    - name: commit config
      panos_commit_firewall:
        provider: '{{ provider }}'
      retries: 3
      delay: 3
      register: result
      until: result is not failed     
      with_items: 
        - "{{ firewall_vars }}"

    - name: restart VAPP
      uri:
        url: "{{ vapp_href }}/power/action/reboot"
        headers:
          Accept: "application/*+json;version=37.1"
          x-vcloud-authorization: "{{ vcloud_authorization }}"
        method: POST
        validate_certs: no
        status_code: "202"

    - name: Sleep for 2 minutes
      ansible.builtin.wait_for:
        timeout: 120
      delegate_to: localhost

    - name: "wait for website to come up"
      uri:
          url: "https://{{ item.man_ip }}"
          status_code: 200
          validate_certs: "false"
      register: result
      until: result.status == 200
      retries: 90
      delay: 10
      with_items: 
        - "{{ firewall_vars }}"

    - name: Sleep for 4 minutes
      ansible.builtin.wait_for:
        timeout: 240
      delegate_to: localhost

    - name: remove PA administrator
      paloaltonetworks.panos.panos_administrator:
        provider:
          ip_address: '{{ manip }}'
          password: '{{ random_password }}'
          username: 'invadmin'
        admin_username: 'admin'                  
        state: absent

    - name: commit config
      panos_commit_firewall:
        provider:
          ip_address: '{{ manip }}'
          password: '{{ random_password }}'
          username: 'invadmin'   

    - name: remove media and delete iso
      command: "terraform destroy -input=false -auto-approve -target='vcd_inserted_media.PA_Template' -target='vcd_catalog_media.PA-Bootstrap' -var-file=autoVars.tfvars" 
      no_log: True
      ignore_errors: true
